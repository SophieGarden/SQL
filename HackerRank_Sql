HackerRank SQL exercise
mostly using MySql
Since the HackerRank MySql version doesn't support window functions, so sometimes, I use MS SQL Server

/*----------------------------------------------*/
Advanced select:
The PADS:
/*Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.*/

SELECT CONCAT(Name,'(',LEFT(Occupation,1),')')
FROM OCCUPATIONS
ORDER BY Name
;

SELECT 'There are a total of ', COUNT(Occupation), CONCAT(LOWER(Occupation),'s.') AS total
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY  COUNT(Occupation), Occupation
;



/*----------------------------------------------*/
Occupations:

set @r1=0, @r2=0, @r3=0, @r4=0;
select MAX(Doctor), MAX(Professor), MAX(Singer), MAX(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    if(Occupation='Doctor', Name,NULL) as Doctor,
    if(Occupation='Professor', Name,NULL) as Professor,
    if(Occupation='Singer', Name,NULL) as Singer,
    if(Occupation='Actor', Name,NULL) as Actor
  from OCCUPATIONS
  order by Name
) Temp
group by RowNumber


Binary Tree Nodes:
--  IN clase only from a list of values (val1, val2,...) not a column name
SELECT N,
        (CASE WHEN P is Null THEN 'Root'
              WHEN N In (SELECT b.P FROM BST b)  THEN 'Inner'
              ELSE 'Leaf'
        END) Type
FROM BST
ORDER BY N
;



/*----------------------------------------------*/
New Companies:
/*
company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees.

TIP: use full groupby (default mode) should include two features: c.company_code, and c.founder, only using one doesn't work
*/
SELECT  c.company_code, c.founder,
        COUNT(DISTINCT l.lead_manager_code),
        COUNT(DISTINCT s.senior_manager_code),
        COUNT(DISTINCT m.manager_code),
        COUNT(DISTINCT e.employee_code)
FROM    Company c,
        Lead_Manager l,
        Senior_Manager s,
        Manager m,
        Employee e
WHERE c.company_code = l.company_code
      AND l.lead_manager_code = s.lead_manager_code
      AND s.senior_manager_code = m.senior_manager_code
      AND m.manager_code = e.manager_code
GROUP BY c.company_code, c.founder
ORDER BY c.company_code
;
Type of Triangle:
SELECT CASE
WHEN A+B<= C OR A+C <=B OR B+C<=A THEN 'Not A Triangle'
WHEN A = B AND B = C THEN 'Equilateral'
WHEN A = B OR B = C OR A = C THEN 'Isosceles'
WHEN (A+B> C OR A+C >B OR B+C>A) AND A <> B AND B <> C AND A <> C THEN  'Scalene'
END
FROM TRIANGLES;

The PADS:

SELECT CONCAT(Name,'(',LEFT(Occupation,1),')')
FROM OCCUPATIONS
ORDER BY Name
;

SELECT 'There are a total of ', COUNT(Occupation), CONCAT(LOWER(Occupation),'s.') AS total
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY  COUNT(Occupation), Occupation
;


/*----------------------------------------------*/
SQL Advanced Join

Symmetric Pairs

Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.

Write a query to output all such symmetric pairs in ascending order by the value of X.

/*problem ask for x < y, the statement is not clear*/
SELECT  a.X, a.Y
FROM Functions a JOIN Functions b ON
 (a.X = b.Y AND a.Y = b.X AND a.X < a.Y)

 UNION

SELECT c.X, c.Y
FROM Functions c
WHERE c.X = c.Y
GROUP BY X,Y
HAVING COUNT(*)>1

ORDER BY X
;



/*----------------------------------------------*/
SQLAdvanced Join
Projects

SET @rank1 = 0, @rank2 = 0;
SELECT Start_Date, End_Date
FROM  (SELECT Start_Date, @rank1 :=@rank1+1 AS rank
        FROM Projects
        WHERE Start_Date NOT IN  (SELECT End_Date FROM Projects)
      )AS a
       JOIN
      (SELECT End_Date , @rank2 := @rank2+1 AS rank
        FROM Projects
        WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)
      ) AS b
      ON a.rank = b.rank
ORDER BY DATEDIFF(End_Date, Start_Date), Start_Date


WINDOW Functions + SQL Server:
SELECT Start_Date, End_Date
FROM  (SELECT Start_Date, RANK() OVER (ORDER BY Start_Date) AS rank
        FROM Projects
        WHERE Start_Date NOT IN  (SELECT End_Date FROM Projects)
      )AS a
       JOIN
      (SELECT End_Date , RANK() OVER (ORDER BY End_Date) AS rank
        FROM Projects
        WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)
      ) AS b
      ON a.rank = b.rank
ORDER BY DATEDIFF(DAY, End_Date, Start_Date) DESC, Start_Date  ASC


Placements
SELECT S.Name
FROM Students s JOIN Friends f using(ID)
     JOIN Packages p1 ON f.ID = p1.ID
     JOIN Packages p2 ON f.Friend_ID  = p2.ID
WHERE p1.Salary < p2.Salary
ORDER BY p2.Salary



/*----------------------------------------------*/
Advanced JOIN:

Interviews

/*
 contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id.  Exclude the contest from the result if all four sums are .
*/

SELECT con.contest_id, con.hacker_id, con.name,
        SUM(sub_s.total_submissions),
        SUM(sub_s.total_accepted_submissions),
        SUM(view_s.total_views),
        SUM(view_s.total_unique_views)
FROM Contests con
    JOIN Colleges col ON con.contest_id = col.contest_id
    JOIN Challenges cha ON col.college_id = cha.college_id
    LEFT JOIN
        (SELECT challenge_id,
            SUM(total_views) AS total_views ,
            SUM(total_unique_views) AS total_unique_views
         FROM View_Stats
         GROUP BY challenge_id
        ) AS view_s
        ON cha.challenge_id = view_s.challenge_id
    LEFT JOIN
        (SELECT challenge_id,
            SUM(total_submissions) AS total_submissions,
            SUM(total_accepted_submissions) AS total_accepted_submissions
         FROM Submission_Stats
         GROUP BY challenge_id
        ) AS sub_s
        ON cha.challenge_id = sub_s.challenge_id

GROUP BY con.contest_id, con.hacker_id, con.name
HAVING SUM(total_submissions) + SUM(total_accepted_submissions) +                SUM(total_views) + SUM(total_unique_views) <> 0
ORDER BY con.contest_id
/*
(1) why group by within subqueries?

Look at the sample input in the problem statement. In the table Challenges there is a challenge_id 18765. This ID is not present in the Submission_Stats table, but is present in the View_Stats table. So, if you do the inner join on Challenges and Submissions_Stats first, there will be no rows with challenge_id 18765 in the result set. And when you do the second inner join with Vew_Stats table, the rows with challenge_id 18765 in it will not be regarded.

If you do the left join, the rows with challege_id 18765 from the Challenges table (the left table) will be preserved in the result set even if there are no rows with this id in the rgiht table.
(2) why left join?
the problem is here:

left join view_stats vs on cha.challenge_id = vs.challenge_id left join submission_stats ss on cha.challenge_id = ss.challenge_id

after left join view_stats, the result contains multiple same challenge_id causing n * m data if left join submission_stats.

for example: view_stats like:
190 33 33
190 32 32
submission_stats like:
190 189 398

after left join two tables, the result becomes:
190 33 33 189 398
190 32 32 189 398
of course, the result is wrong.
*/



/*----------------------------------------------*/
SQL advanced JOIN:
15 Days of Learning SQL
/*Write a query to print total number of unique hackers who made at least 1 submission each day (starting on the first day of the contest), and find the hacker_id and name of the hacker who made maximum number of submissions each day.
If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. The query should print this information for each day of the contest, sorted by the date.*/
SELECT dates.submission_date,
    (SELECT COUNT(DISTINCT hacker_id)
     FROM Submissions s1
     WHERE s1.submission_date = dates.submission_date
           AND DATEDIFF(s1.submission_date, '2016-03-01')
                = (SELECT COUNT(DISTINCT s2.submission_date)
                   FROM Submissions s2
                   WHERE s2.submission_date < s1.submission_date
                         AND s2.hacker_id = s1.hacker_id
                  )
    ),

    (SELECT hacker_id
     FROM Submissions s3
     WHERE s3.submission_date = dates.submission_date
     GROUP BY hacker_id
     ORDER BY COUNT(s3.submission_id) DESC, hacker_id ASC
     LIMIT 1
    ) AS top_id,

    (SELECT name
     FROM Hackers
     WHERE hacker_id = top_id
    )

FROM (SELECT DISTINCT submission_date
      FROM Submissions
     ) AS dates
ORDER BY submission_date


/*note: DATEDIFF("2017-06-25", "2017-06-15")
10, so use < instead of <=*/
