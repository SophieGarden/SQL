HackerRank SQL exercise
mostly using MySql
Since the HackerRank MySql doesn't have window functions, so sometimes, I use MS SQL Server

Occupations:

set @r1=0, @r2=0, @r3=0, @r4=0;
select MAX(Doctor), MAX(Professor), MAX(Singer), MAX(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    if(Occupation='Doctor', Name,NULL) as Doctor,
    if(Occupation='Professor', Name,NULL) as Professor,
    if(Occupation='Singer', Name,NULL) as Singer,
    if(Occupation='Actor', Name,NULL) as Actor
  from OCCUPATIONS
  order by Name
) Temp
group by RowNumber


Binary Tree Nodes:
--  IN clase only from a list of values (val1, val2,...) not a column name
SELECT N,
        (CASE WHEN P is Null THEN 'Root'
              WHEN N In (SELECT b.P FROM BST b)  THEN 'Inner'
              ELSE 'Leaf'
        END) Type
FROM BST
ORDER BY N
;

New Companies:
/*
company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees.

TIP: use full groupby (default mode) should include two features: c.company_code, and c.founder, only using one doesn't work
*/
SELECT  c.company_code, c.founder,
        COUNT(DISTINCT l.lead_manager_code),
        COUNT(DISTINCT s.senior_manager_code),
        COUNT(DISTINCT m.manager_code),
        COUNT(DISTINCT e.employee_code)
FROM    Company c,
        Lead_Manager l,
        Senior_Manager s,
        Manager m,
        Employee e
WHERE c.company_code = l.company_code
      AND l.lead_manager_code = s.lead_manager_code
      AND s.senior_manager_code = m.senior_manager_code
      AND m.manager_code = e.manager_code
GROUP BY c.company_code, c.founder
ORDER BY c.company_code
;
Type of Triangle:
SELECT CASE
WHEN A+B<= C OR A+C <=B OR B+C<=A THEN 'Not A Triangle'
WHEN A = B AND B = C THEN 'Equilateral'
WHEN A = B OR B = C OR A = C THEN 'Isosceles'
WHEN (A+B> C OR A+C >B OR B+C>A) AND A <> B AND B <> C AND A <> C THEN  'Scalene'
END
FROM TRIANGLES;

The PADS:

SELECT CONCAT(Name,'(',LEFT(Occupation,1),')')
FROM OCCUPATIONS
ORDER BY Name
;

SELECT 'There are a total of ', COUNT(Occupation), CONCAT(LOWER(Occupation),'s.') AS total
FROM OCCUPATIONS
GROUP BY Occupation
ORDER BY  COUNT(Occupation), Occupation
;




SQL Advanced Join

Symmetric Pairs

Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.

Write a query to output all such symmetric pairs in ascending order by the value of X.

/*problem ask for x < y, the statement is not clear*/
SELECT  a.X, a.Y
FROM Functions a JOIN Functions b ON
 (a.X = b.Y AND a.Y = b.X AND a.X < a.Y)

 UNION

SELECT c.X, c.Y
FROM Functions c
WHERE c.X = c.Y
GROUP BY X,Y
HAVING COUNT(*)>1

ORDER BY X
;


SQLAdvanced JoinProjects

SET @rank1 = 0, @rank2 = 0;
SELECT Start_Date, End_Date
FROM  (SELECT Start_Date, @rank1 :=@rank1+1 AS rank
        FROM Projects
        WHERE Start_Date NOT IN  (SELECT End_Date FROM Projects)
      )AS a
       JOIN
      (SELECT End_Date , @rank2 := @rank2+1 AS rank
        FROM Projects
        WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)
      ) AS b
      ON a.rank = b.rank
ORDER BY DATEDIFF(End_Date, Start_Date), Start_Date


WINDOW Functions + SQL Server:
SELECT Start_Date, End_Date
FROM  (SELECT Start_Date, RANK() OVER (ORDER BY Start_Date) AS rank
        FROM Projects
        WHERE Start_Date NOT IN  (SELECT End_Date FROM Projects)
      )AS a
       JOIN
      (SELECT End_Date , RANK() OVER (ORDER BY End_Date) AS rank
        FROM Projects
        WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)
      ) AS b
      ON a.rank = b.rank
ORDER BY DATEDIFF(DAY, End_Date, Start_Date) DESC, Start_Date  ASC


Placements
SELECT S.Name
FROM Students s JOIN Friends f using(ID)
     JOIN Packages p1 ON f.ID = p1.ID
     JOIN Packages p2 ON f.Friend_ID  = p2.ID
WHERE p1.Salary < p2.Salary
ORDER BY p2.Salary
